
alarm-interval:

-- repeats incoming signal as pulse with specified interval, for e.g. speakers

local net, sig = rednet, 'kr-attention_1'
local t_check, t_pulse = 180, 300
if (output[sig] or 0) == 0 then
	if (net[sig] or 0) > 0
		then delay, output[sig] = 1, net[sig] -- start pulse
		else delay, output[sig] = t_check end
else delay, output[sig] = t_pulse end -- end pulse



count-shortage-pulse:

-- checks sig_check count (red) for < sig_thresh every t_check ticks
-- on triggering, sends single-pulse sig_pulse alarm and sleeps for t_pulse ticks
-- useful for triggering alarm siren when some production line fails

local net, sig_pulse = rednet, 'signal-A'
local sig_check, sig_thresh = 'solid-fuel', 10
local t_pulse, t_check = 60 * 60 * 2, 60 * 2

if output[sig_pulse] then delay, output[sig_pulse] = t_pulse
elseif (net[sig_check] or 0) < sig_thresh then output[sig_pulse] = 1
else delay = t_check end


battery-low-pulse:

-- same as count-shortage-pulse but for triggering on battery discharge
-- triggers on acc_n_ignore < net[acc_sig] < acc_n_alarm before idle_hour
-- hour signal is from timetools mod combinator

local net, sig_pulse, idle_hour = rednet, 'signal-red', 4
local acc_sig, acc_n_alarm, acc_n_ignore = 'signal-B', 20, 10
local t_pulse, t_idle, t_check = 60 * 60 * 3, 60 * 60 * 10, 60 * 60 * 1

if net['signal-clock-hour'] < idle_hour and net[acc_sig] then
	if output[sig_pulse] then delay, output[sig_pulse] = t_pulse
	elseif net[acc_sig] < acc_n_alarm and net[acc_sig] > acc_n_ignore
		then output[sig_pulse] = 1 else delay = t_check end
else delay = t_idle end


cargo-limit:

-- emits filter/enable signal to control inserters up to some cargo limit (green input)

local net, sig_train, delay = greennet, 'signal-T', 60
local at, an = 'chemical-science-pack', 450
if net[sig_train] and (net[at] or 0) < an
  then output[at] = 1 else output[at] = nil end


cargo-wagon-balance:

-- emits filter signals to control inserters to load two goods up to limit (green input)
-- only enables filters when auto-train is stopped

local net, sig_train, delay = greennet, 'signal-T', 60
local at, an = 'plastic-bar', 950
local bt, bn = 'sulfur', 450

output[at], output[bt] = nil
if net[sig_train] then
  if (net[at] or 0) < an then output[at] = 1 end
  if (net[bt] or 0) < bn then output[bt] = 1 end
end
